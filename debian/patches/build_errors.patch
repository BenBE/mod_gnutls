Description: Fix build errors against newer gnutls package.
Author: Barry deFreese <bdefreese@debian.org>
Index: mod-gnutls-0.5.10/include/mod_gnutls.h.in
===================================================================
--- mod-gnutls-0.5.10.orig/include/mod_gnutls.h.in	2013-07-17 21:49:34.000000000 -0400
+++ mod-gnutls-0.5.10/include/mod_gnutls.h.in	2013-07-17 21:49:52.000000000 -0400
@@ -148,7 +148,7 @@
 /**
  * write_flush will flush data
  */
-static ssize_t write_flush(mgs_handle_t * ctxt);
+/* static ssize_t write_flush(mgs_handle_t * ctxt); */
 
 /**
  * mgs_filter_input will filter the input data
Index: mod-gnutls-0.5.10/src/gnutls_io.c
===================================================================
--- mod-gnutls-0.5.10.orig/src/gnutls_io.c	2011-07-08 17:29:46.000000000 -0400
+++ mod-gnutls-0.5.10/src/gnutls_io.c	2013-07-17 21:57:09.429551900 -0400
@@ -448,6 +448,40 @@
 	}
 }
 
+static ssize_t write_flush(mgs_handle_t * ctxt)
+{
+	apr_bucket *e;
+
+	if (!(ctxt->output_blen || ctxt->output_length)) {
+		ctxt->output_rc = APR_SUCCESS;
+		return 1;
+	}
+
+	if (ctxt->output_blen) {
+		e = apr_bucket_transient_create(ctxt->output_buffer,
+						ctxt->output_blen,
+						ctxt->output_bb->
+						bucket_alloc);
+		/* we filled this buffer first so add it to the
+		 * head of the brigade
+		 */
+		APR_BRIGADE_INSERT_HEAD(ctxt->output_bb, e);
+		ctxt->output_blen = 0;
+	}
+
+	ctxt->output_length = 0;
+	e = apr_bucket_flush_create(ctxt->output_bb->bucket_alloc);
+	APR_BRIGADE_INSERT_TAIL(ctxt->output_bb, e);
+
+	ctxt->output_rc = ap_pass_brigade(ctxt->output_filter->next,
+					  ctxt->output_bb);
+	/* clear the brigade to be ready for next time */
+	apr_brigade_cleanup(ctxt->output_bb);
+
+	return (ctxt->output_rc == APR_SUCCESS) ? 1 : -1;
+}
+
+
 int mgs_rehandshake(mgs_handle_t * ctxt)
 {
 	int rv;
@@ -742,39 +776,6 @@
 }
 
 
-static ssize_t write_flush(mgs_handle_t * ctxt)
-{
-	apr_bucket *e;
-
-	if (!(ctxt->output_blen || ctxt->output_length)) {
-		ctxt->output_rc = APR_SUCCESS;
-		return 1;
-	}
-
-	if (ctxt->output_blen) {
-		e = apr_bucket_transient_create(ctxt->output_buffer,
-						ctxt->output_blen,
-						ctxt->output_bb->
-						bucket_alloc);
-		/* we filled this buffer first so add it to the
-		 * head of the brigade
-		 */
-		APR_BRIGADE_INSERT_HEAD(ctxt->output_bb, e);
-		ctxt->output_blen = 0;
-	}
-
-	ctxt->output_length = 0;
-	e = apr_bucket_flush_create(ctxt->output_bb->bucket_alloc);
-	APR_BRIGADE_INSERT_TAIL(ctxt->output_bb, e);
-
-	ctxt->output_rc = ap_pass_brigade(ctxt->output_filter->next,
-					  ctxt->output_bb);
-	/* clear the brigade to be ready for next time */
-	apr_brigade_cleanup(ctxt->output_bb);
-
-	return (ctxt->output_rc == APR_SUCCESS) ? 1 : -1;
-}
-
 ssize_t mgs_transport_write(gnutls_transport_ptr_t ptr,
 			    const void *buffer, size_t len)
 {
Index: mod-gnutls-0.5.10/src/gnutls_hooks.c
===================================================================
--- mod-gnutls-0.5.10.orig/src/gnutls_hooks.c	2011-07-08 17:29:46.000000000 -0400
+++ mod-gnutls-0.5.10/src/gnutls_hooks.c	2013-07-17 22:18:51.452008280 -0400
@@ -181,12 +181,12 @@
 	if (ctxt->sc->certs_x509[0] != NULL && ctxt->sc->cert_pgp == NULL) {
 		cprio[0] = GNUTLS_CRT_X509;
 		cprio[1] = 0;
-		gnutls_certificate_type_set_priority(session, cprio);
+		gnutls_set_default_priority(session);
 	} else if (ctxt->sc->cert_pgp != NULL
 		   && ctxt->sc->certs_x509[0] == NULL) {
 		cprio[0] = GNUTLS_CRT_OPENPGP;
 		cprio[1] = 0;
-		gnutls_certificate_type_set_priority(session, cprio);
+		gnutls_set_default_priority(session);
 	}
 
 	return 0;
@@ -750,7 +750,7 @@
 		return DECLINED;
 	}
 
-	if (c->remote_addr->hostname || apr_strnatcmp(c->remote_ip,c->local_ip) == 0) {
+	if (c->remote_host || apr_strnatcmp(c->client_ip,c->local_ip) == 0) {
         /* Connection initiated by Apache (mod_proxy) => ignore */
                 return OK;
         }
